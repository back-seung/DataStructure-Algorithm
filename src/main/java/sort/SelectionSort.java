package sort;public class SelectionSort {    /*    * 강의명 : 나동빈 실전 알고리즘 강좌 1강 - 선택 정렬(Selection Sort)    * 문제 : 아래 주어진 배열을 1부터 10까지 순서대로 출력하는 문제.    * 아이디어 : 가장 작은 것을 선택해서 제일 앞으로 보낸다.    * 손코딩    *   1. [1, 10, 5, 8, 7, 6, 4, 3, 2, 9] -- 1은 제자리에 있어도 됨    *   2. [1, *2*, 5, 8, 7, 6, 4, 3, *10*, 9]    *   3. [1, 2, *3*, 8, 7, 6, 4, *5*, 10, 9]    *   4. [1, 2, 3, *4*, 7, 6, *8*, 5, 10, 9]    *   5. [1, 2, 3, 4, *5*, 6, 8, *7*, 10, 9]    *   6. [1, 2, 3, 4, 5, 6, 8, 7, 10, 9] -- 6은 제자리에 있어도 됨    *   7. [1, 2, 3, 4, 5, 6, *7*, *8*, 10, 9]    *   8. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] -- 정렬 끝    *    *  시간 복잡도 :    * 최상위 반복문의 i는 0 ~ 9까지 반복을 한다. 그리고 그 안의 반복문의 j는 i부터 반복 하게 되는데    * 처음 i = 0이므로 j는 0부터 9까지(10번), 그 다음 i = 1이 되므로 j는 1부터 9까지(9번) ... i = 9이므로 j는 9부터 9까지(1번) 반복하면 총 55번을 반복해야 한다.    * 이를 등차수열이라고 하는데, 등차수열의 공식은  N * (N + 1) / 2이다.    * 공식을 통해 계산해보면 10 * (10 + 1) / 2 = 55가 되는데, 시간 복잡도는 BigO 표기법을 통해 표현한다. BigO로 표기할 때는 상수항은 무시하기 때문에 다음과 같이 다시 나타낼 수있다.    *    * 1. N * (N + 1) / 2 ==> +1, /2 제거    * 2. N * N    * 3. O(N^2)    *    * 따라서 빅오 표기법을 통해 시간 복잡도는 O(N^2)이라고 할 수 있다.    * */    // 풀이    public static void main(String[] args) {        // 베열        final int[] nums = {1, 10, 5, 8, 7, 6, 4, 3, 2, 9};        // 원소의 위치        int index = 0;        // 임시값        int temp = 0;        for (int i = 0; i < nums.length; i++) {            int min = 9999; // 모든 원소들보다 더 큰 숫자를 최소값으로 초기화한다.            for (int j = i; j < nums.length; j++) {                if (min > nums[j]) { // 현재 지정된 원소가 최소값보다 작은가?                    min = nums[j]; // YES: 최소값을 변경한다.                    index = j; // 해당 원소의 위치를 저장한다.                }            }            // 스와핑            temp = nums[i]; // 임시값에 nums[i]를 잠시 넣어둔다.            nums[i] = nums[index]; // 제일 앞인 nums[i]값을 최소값으로 지정된 원소(nums[index])로 변경한다.            nums[index] = temp; // 최소값의 위치에는 임시값으로 저장해두었던 nums[i]의 값을 넣어 서로의 위치를 스와핑한다.        }        // 출력        for (int i : nums) {            System.out.print(i + " ");        }    }}