package dataStructure;public class Hash<K, V> implements HashI {    class HashElement<K, V> implements Comparable<HashElement<K, V>> {        K key;        V value;        public HashElement(K key, V value) {            this.key = key;            this.value = value;        }        public int compareTo(HashElement<K, V> o) {            return ((Comparable<K>) this.key).compareTo(o.key);        }    }    int numElements;    int tableSize;    double maxLoadfactor;    LinkedList<HashElement<K, V>>[] harray;    // 해시 구현 생성자    public Hash(int tableSize) {        this.tableSize = tableSize;        // 형 변환        harray = (LinkedList<HashElement<K, V>>[]) new LinkedList[tableSize];        // 연결리스트 체이닝        for (int i = 0; i < tableSize; i++) {            harray[i] = new LinkedList<HashElement<K, V>>();        }        maxLoadfactor = 0.75;        numElements = 0;    }}